
## Bruixes i Fades Backend Project 
__________________________

This repository contains the backend code for a mobile web application called Bruixes i Fades.

Frontend of this project: [Bruixes i Fades Frontend](https://github.com/marinaescriva/Bruixes_Frontend)


### About the project


Bruixes i Fades is a board game pub where you can enjoy different beers and play board games with friends.

### Project development and ideation

The project idea stems from a local café near my home, for which I created a comprehensive graphic identity project in 2022: [Bruixes i Fades](https://marinaescrivasalvador.myportfolio.com/bruixes-fades)


### Database Design

![Database](src/img/DBdesign.png)

### Stack

[![MySQL](https://img.shields.io/badge/MySQL-4479A1?style=for-the-badge&logo=mysql&logoColor=white)](https://www.mysql.com/)[![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=typescript&logoColor=white)](https://www.typescriptlang.org/)[![Git](https://img.shields.io/badge/Git-F05032?style=for-the-badge&logo=git&logoColor=white)](https://git-scm.com/)[![Thunder Client](https://img.shields.io/badge/Thunder_Client-404EED?style=for-the-badge&logo=thunderbird&logoColor=white)](https://www.thunderclient.io/)


### API Endpoints

<details> <summary> How it works </summary>

##### 1. User Registration
- URL: /api/auth/register
- Method: POST
- Description: Registers a new user.
<details>
  <summary>Request body:</summary>

  ```json
  {
    "username": "Ana",
    "email": "ana@gmail.com",
    "password": "224466"
  }
  ```
</details>
</br>
===========================
</br>

##### 2. User Login
- URL: /api/auth/login
- Method: POST
- Description: Logs in an existing user.

<details>
  <summary>Request body:</summary>

 ```json
{
  "email": "ana@gmail.com",
  "password": "224466"
}
```
</details>
</br>
===========================
</br>

##### 3. Get All Games
- URL: /api/games
- Method: GET
- Description: Retrieves all games available.
- Request: token on Auth/Bearer.
<details>
  <summary>Response:</summary>

  ```json
  {
    "success": true,
    "data": [
      {
        "id": 1,
        "nombre": "Catan",
        "jugadores": 4,
        "isAvailable": true
      },
      {
        "id": 2,
        "nombre": "Ticket to Ride",
        "jugadores": 5,
        "isAvailable": true
      },
      {
        "id": 3,
        "nombre": "Pandemic",
        "jugadores": 4,
        "isAvailable": false
      }
    ]
  }
   ```
   </details>

   </br>
===========================
</br>

  ##### 4. Delete Game
  
- URL: /api/games/:id
- Method: DELETE
- Description: Deletes a game by its ID.
- Request: token of Super Admin on Auth/Bearer.

<details>
  <summary>Response:</summary>

  ```json
{
 "success": true,
 "message": "Game deleted"
}

 ```
</details>

   </br>
===========================
</br>

##### 5. Get All Tables
- URL: /api/tables
- Method: GET
- Description: Retrieves all available tables.
- Request: token on Auth/Bearer.
<details>
  <summary>Response:</summary>

  ```json
  {
    "success": true,
    "data": [
      {
        "id": 1,
        "numero": 1,
        "capacidad": 4,
        "isAvailable": true
      },
      {
        "id": 2,
        "numero": 2,
        "capacidad": 6,
        "isAvailable": true
      },
      {
        "id": 3,
        "numero": 3,
        "capacidad": 8,
        "isAvailable": false
      }
    ]
  }
  ```
</details>

   </br>
===========================
</br>

##### 6. Delete Tables
- URL: /api/tables/:id
- Method: DELETE
- Description: Deletes a table by its ID.
- Request: token of Super Admin on Auth/Bearer.
<details>
  <summary>Response:</summary>

  ```json

{
"success": true,
"message": "Table deleted"
}

 ```

</details>

   </br>
===========================
</br>


##### 7. Get All Users
- URL: /api/users
- Method: GET
- Description: Retrieves all users.
- Request: token of Super Admin on Auth/Bearer.
<details>
  <summary>Response:</summary>

  ```json
  {
    "success": true,
    "data": [
      {
        "id": 1,
        "nombre": "John Doe",
        "email": "john@example.com",
        "createdAt": "2024-04-24T12:00:00Z",
        "updatedAt": "2024-04-24T12:00:00Z"
      },
      {
        "id": 2,
        "nombre": "Jane Smith",
        "email": "jane@example.com",
        "createdAt": "2024-04-24T12:00:00Z",
        "updatedAt": "2024-04-24T12:00:00Z"
      }
    ]
  }
```

</details>

   </br>
===========================
</br>

##### 8. Get My Profile
- URL: /api/users/profile
- Method: GET
- Description: Retrieves the profile of the current user.
- Request: token on Auth/Bearer.
<details>
  <summary>Response:</summary>

  ```json
  {
"success": true,
"data": {
  "id": 1,
  "nombre": "John Doe",
  "email": "john@example.com",
  "createdAt": "2024-04-24T12:00:00Z",
  "updatedAt": "2024-04-24T12:00:00Z"
}
}
```
</details>
   </br>
===========================
</br>

##### 9. Update Profile
- URL: /api/users/profile
- Method: PUT
- Description: Updates the profile of the current user. 
(Can update name and/or email)
- Request: token on Auth/Bearer.
<details>
  <summary>Request body:</summary>

  ```json
  {
  "nombre": "John Smith",
  "email": "john@example.com"
}

```
</details>
<details>
  <summary>Response:</summary>

  ```json
{
"success": true,
"message": "User updated",
"data": {
  "id": 1,
  "nombre": "John Smith",
  "email": "john@example.com",
  "createdAt": "2024-04-24T12:00:00Z",
  "updatedAt": "2024-04-24T12:00:00Z"
}
}

```
</details>
   </br>
===========================
</br>

##### 10. Delete User
- URL: /api/users/:id
- Method: DELETE
- Description: Deletes a user by its ID.
- Request: token of Super Admin on Auth/Bearer.
<details>
  <summary>Response:</summary>

  ```json
{
"success": true,
"message": "User deleted successfuly"
}

```
</details>
   </br>
===========================
</br>

##### 11. Get All Reservas
- URL: /api/reservas
- Method: GET
- Description: Retrieves all reservations.
- Request: token of Super Admin on Auth/Bearer.
<details>
  <summary>Response:</summary>

  ```json
  {
    "success": true,
    "data": [
      {
        "id": 1,
        "idUsuario": 1,
        "idMesa": 1,
        "idJuego": 1,
        "idEvento": null,
        "fechaHoraInicio": "2024-04-25T12:00:00Z"
      },
      {
        "id": 2,
        "idUsuario": 2,
        "idMesa": 2,
        "idJuego": null,
        "idEvento": null,
        "fechaHoraInicio": "2024-04-25T13:00:00Z"
      }
    ]
  }
  ```
   </details>
   </br>
===========================
</br>

##### 12. New Reserva
- URL: /api/reservas
- Method: POST
- Description: Creates a new reservation.
- Request: token on Auth/Bearer.
<details>
  <summary>Request body:</summary>

  ```json
  {
  "idMesa": 1,
  "idJuego": 1,
  "fechaHoraInicio": "2024-04-26T14:00:00Z"
}

  ```
   </details>

   <details>
  <summary>Response:</summary>

  ```json
  {
"success": true,
"message": "Reserva creada exitosamente",
"data": {
  "reservaId": {
      "id": 3,
      "idUsuario": 1,
      "idMesa": 1,
      "idJuego": 1,
      "idEvento": null,
      "fechaHoraInicio": "2024-04-26T14:00:00Z"
  }
}
}
 ```
   </details>
   </br>
===========================
</br>

##### 13. Get My Reservas
- URL: /api/misreservas
- Method: GET
- Description: Retrieves reservations of the current user.
- Request: token on Auth/Bearer.
<details>
  <summary>Response:</summary>

  ```json
 {
"success": true,
"data": [
  {
      "id": 1,
      "idUsuario": 1,
      "idMesa": 1,
      "idJuego": 1,
      "idEvento": null,
      "fechaHoraInicio": "2024-04-25T12:00:00Z"
  }
]
}
  ```
   </details>
   </br>
===========================
</br>

##### 14. Delete Reserva
- URL: /api/reservas/:id
- Method: DELETE
- Description: Deletes a reservation by its ID.
- Request: token of Super Admin or owner on Auth/Bearer.
<details>
  <summary>Response:</summary>

  ```json
 {
"success": true,
"message": "Reserva deleted"
}
  ```
   </details>
   </br>
===========================
</br>

</details>

### Future features

- Add events to join
- Limit reservations choose diferent params like date/table/game to allow more options
- Add more information about games ( players , duration..etc)

### Author

- Marina Escrivà 

[LinkedIn](https://www.linkedin.com/in/marina-escriv%C3%A1-salvador-047134100/) <img src="https://simpleicons.org/icons/linkedin.svg" width="20" height="20" />

[Porfolio](https://marinaescrivasalvador.myportfolio.com/) <img src="https://simpleicons.org/icons/adobe.svg" width="20" height="20" />

[marinaescriva.24@gmail.com](mailto:marinaescriva.24@gmail.com) <img src="https://simpleicons.org/icons/gmail.svg" width="20" height="20" />

